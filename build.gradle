plugins {
  id 'java'
  id 'groovy'
  id 'maven'
  id 'maven-publish'
  id 'com.jfrog.bintray' version '1.8.5'
  id 'com.jfrog.artifactory' version '4.15.2'
  id 'com.gradle.plugin-publish' version '0.11.0'
  id 'java-gradle-plugin'
}

group = 'ca.cutterslade.gradle'
version = '1.4.3-STELLAR-SNAPSHOT'

repositories {
  jcenter()
}

dependencies {
  compile gradleApi()
  compile localGroovy()
  compile 'org.apache.maven.shared:maven-dependency-analyzer:1.11.3'

  testImplementation("commons-io:commons-io:2.6")
  testImplementation("org.spockframework:spock-core:1.3-groovy-2.4") {
    exclude module: "groovy-all"
  }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

wrapper {
  distributionType = Wrapper.DistributionType.ALL
  gradleVersion = "6.0.1"
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact javadocJar {classifier 'javadoc'}
      artifact sourcesJar {classifier 'sources'}
    }
  }

  repositories {
    maven {
      url "$buildDir/repo"
    }
    for (int mavenRepositoryIndex = 0; mavenRepositoryIndex < 100 && project.hasProperty("maven.repository.url.$mavenRepositoryIndex"); mavenRepositoryIndex++) {
      logger.info("Going to publish to maven.repository.url.$mavenRepositoryIndex(" + project.getProperty("maven.repository.url.$mavenRepositoryIndex") + ")")
      maven{
        url = project.getProperty("maven.repository.url.$mavenRepositoryIndex")
        credentials {
          username = project.getProperty("maven.repository.username.$mavenRepositoryIndex")
          password = project.getProperty("maven.repository.password.$mavenRepositoryIndex")
        }
      }
    }
  }
}

if (this.hasProperty('bintrayUser') && this.hasProperty('bintrayApiKey')) {
  bintray {
    user = bintrayUser
    key = bintrayApiKey
    publications = ['mavenJava']
    pkg {
      repo = 'maven'
      name = project.name
      desc = 'Dependency analysis plugin for gradle'
      websiteUrl = 'https://github.com/wfhartford/gradle-dependency-analyze'
      issueTrackerUrl = 'https://github.com/wfhartford/gradle-dependency-analyze/issues'
      vcsUrl = 'https://github.com/wfhartford/gradle-dependency-analyze.git'
    }
  }
}

if (this.hasProperty('jfrogUser') && this.hasProperty('jfrogPassword')) {
  artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
      repository {
        repoKey = 'oss-snapshot-local'
        username = jfrogUser
        password = jfrogPassword
        maven = true
      }
      defaults {
        publications('mavenJava')
      }
    }
  }
}

tasks.withType(PublishToMavenRepository) {
  it.dependsOn check
}

gradlePlugin {
  plugins {
    dependencyAnalyze {
      id = 'ca.cutterslade.analyze'
      implementationClass = 'ca.cutterslade.gradle.analyze.AnalyzeDependenciesPlugin'
    }
  }
}
pluginBundle {
  website = 'https://github.com/wfhartford/gradle-dependency-analyze'
  vcsUrl = 'https://github.com/wfhartford/gradle-dependency-analyze'
  description = 'Dependency analysis plugin for gradle. This plugin attempts to replicate the functionality of the maven dependency plugin\'s analyze goals which fail the build if dependencies are declared but not used or used but not declared.'
  plugins {
    dependencyAnalyze {
      displayName = "Gradle Dependency Analyze"
      tags = ['dependency','verification']
    }
  }
  mavenCoordinates {
    groupId = 'ca.cutterslade.gradle'
    artifactId = 'gradle-dependency-analyze'
  }
}
